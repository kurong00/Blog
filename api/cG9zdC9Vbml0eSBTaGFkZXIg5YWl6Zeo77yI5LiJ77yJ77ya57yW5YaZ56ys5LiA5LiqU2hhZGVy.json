{"title":"Unity Shader 入门（三）：编写第一个Shader","date":"2017-11-12T16:00:00.000Z","thumbnail":"https://github.com/kurong00/blog/blob/master/thumbnail/shader3/shader3.png?raw=true","slug":"Unity Shader 入门（三）：编写第一个Shader","categories":["Shader"],"updated":"2019-05-01T01:49:24.176Z","content":"<h2 id=\"编写第一个Shader\">编写第一个Shader<a href=\"post/Unity Shader 入门（三）：编写第一个Shader#编写第一个Shader\"></a></h2><p>上一节我们学习了第一个简单的Shader，现在我们可以开始写第一个shader练练手了（搓搓手）。首先我们挑一个【边缘发光（水晶球）】的shader来写</p>\n<p>首先来看一下效果图，如果你感兴趣的话就接下来看吧：<img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader3/shader.PNG?raw=true\" alt></p>\n<h3 id=\"实现原理：\">实现原理：<a href=\"post/Unity Shader 入门（三）：编写第一个Shader#实现原理：\"></a></h3><p>根据物体表面法向量和视线向量的夹角来判断是否是物体的边缘部位。夹角越大（接近垂直）说明越接近物体边缘部分。<font color=\"#D37885\">重点：向量点积运算。</font></p>\n<h3 id=\"具体解说：\">具体解说：<a href=\"post/Unity Shader 入门（三）：编写第一个Shader#具体解说：\"></a></h3><p>先放一段实现的代码：</p>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">Shader \"Custom<span class=\"token operator\">/</span>Rim<span class=\"token comment\" spellcheck=\"true\">//RimBump\" {</span>\n    Properties<span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_Color</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_SpecColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Specular Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_BumpMap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Normalmap\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bump\"</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">_RimColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rim Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.19</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.16</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_RimPower</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rim Power\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span>\n    <span class=\"token punctuation\">}</span>\n        SubShader<span class=\"token punctuation\">{</span>\n            Tags <span class=\"token punctuation\">{</span> <span class=\"token string\">\"RenderType\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Opaque\"</span> <span class=\"token punctuation\">}</span>\n            LOD <span class=\"token number\">400</span>\n\n        CGPROGRAM\n        <span class=\"token preprocessor builtin\">#pragma</span> surface surf BlinnPhong\n        <span class=\"token preprocessor builtin\">#pragma</span> target <span class=\"token number\">3.0</span>\n\n        sampler2D _BumpMap<span class=\"token punctuation\">;</span>\n        fixed4 _Color<span class=\"token punctuation\">;</span>\n        float4 _RimColor<span class=\"token punctuation\">;</span>\n        float _RimPower<span class=\"token punctuation\">;</span>\n\n        struct Input <span class=\"token punctuation\">{</span>\n            float2 uv_MainTex<span class=\"token punctuation\">;</span>\n            float2 uv_BumpMap<span class=\"token punctuation\">;</span>\n            float3 viewDir<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        void <span class=\"token function\">surf</span><span class=\"token punctuation\">(</span>Input IN<span class=\"token punctuation\">,</span> inout SurfaceOutput o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            o<span class=\"token punctuation\">.</span>Albedo <span class=\"token operator\">=</span> _Color<span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Gloss <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Normal <span class=\"token operator\">=</span> <span class=\"token function\">UnpackNormal</span><span class=\"token punctuation\">(</span><span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_BumpMap<span class=\"token punctuation\">,</span> IN<span class=\"token punctuation\">.</span>uv_BumpMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            half rim <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>IN<span class=\"token punctuation\">.</span>viewDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Emission <span class=\"token operator\">=</span> _RimColor<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>rim<span class=\"token punctuation\">,</span> _RimPower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ENDCG\n        <span class=\"token punctuation\">}</span>\n            FallBack <span class=\"token string\">\"Diffuse\"</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>如果你看过上一篇的Shader介绍你应该可以大致看懂上面的代码，我们就关键部分说明一下：</p>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">void <span class=\"token function\">surf</span><span class=\"token punctuation\">(</span>Input IN<span class=\"token punctuation\">,</span> inout SurfaceOutput o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            o<span class=\"token punctuation\">.</span>Albedo <span class=\"token operator\">=</span> _Color<span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Gloss <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Normal <span class=\"token operator\">=</span> <span class=\"token function\">UnpackNormal</span><span class=\"token punctuation\">(</span><span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_BumpMap<span class=\"token punctuation\">,</span> IN<span class=\"token punctuation\">.</span>uv_BumpMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            half rim <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>IN<span class=\"token punctuation\">.</span>viewDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>Emission <span class=\"token operator\">=</span> _RimColor<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>rim<span class=\"token punctuation\">,</span> _RimPower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>首先这两句：</li>\n</ul>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">o<span class=\"token punctuation\">.</span>Albedo <span class=\"token operator\">=</span> _Color<span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>Gloss <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>类比上一篇，o.Albedo 此时可以获得我们设置的颜色和贴图之间混合后的颜色，o.Gloss 我们将发光强度设置成1。</p>\n<ul>\n<li>接下来是重点：<pre class=\" language-haxe\"><code class=\"language-haxe\">o<span class=\"token punctuation\">.</span>Normal <span class=\"token operator\">=</span> <span class=\"token function\">UnpackNormal</span><span class=\"token punctuation\">(</span><span class=\"token function\">tex2D</span><span class=\"token punctuation\">(</span>_BumpMap<span class=\"token punctuation\">,</span> IN<span class=\"token punctuation\">.</span>uv_BumpMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhalf rim <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>IN<span class=\"token punctuation\">.</span>viewDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>Emission <span class=\"token operator\">=</span> _RimColor<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">pow</span> <span class=\"token punctuation\">(</span>rim<span class=\"token punctuation\">,</span> _RimStrength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<code>UnpackNormal</code> 是定义在UnityCG.cginc文件中的方法（这个文件中包含了一系列常用的CG变量以及方法，在Unity安装路径中可以找到），<code>UnpackNormal</code>接受一个fixed4的输入，并将其转换为所对应的法线值（fixed3）。在解包得到这个值之后，将其赋给输出的Normal，接下来我们就可以来使用Normal值啦。<h4 id=\"有关法线贴图\"><a href=\"#有关法线贴图\" class=\"headerlink\" title=\"有关法线贴图\"></a>有关法线贴图</h4><blockquote>\n<p>这一点归类于扩展阅读，如果你想知道<code>UnpackNormal</code>的原理可以继续查看，如果不的话就跳过这一段吧！<br>假设你想知道原理，那首先思考一个问题<strong>为什么法线贴图看起来大多是蓝色的？</strong> </p>\n<ul>\n<li>实际上，我们通常见到的这种偏蓝色的法线纹理中，存储的是在Tangent Space中的顶点法线方向。那么，问题又来了，什么是Tangent Space。在Tangent Space中，坐标原点就是顶点的位置，其中z轴是该顶点本身的法线方向（N）。这样，另外两个坐标轴就是和该点相切的两条切线。这样的切线是有无数条，但模型一般会给定该顶点的一个tangent。（<a href=\"http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\" target=\"_blank\" rel=\"noopener\">给定的过程可以见这个链接</a>）</li>\n<li>通常我们所见的法线纹理是基于<strong>原法线信息构建的坐标系</strong>来构建出来的。那种偏蓝色的法线纹理其实就是存储在每个顶点各自的Tangent Space中<strong>法线的扰动方向</strong>。也就是说，如果一个顶点的法线方向不变，那么在它的Tangent Space中，新的normal值就是z轴方向，也就是说值为(0, 0, 1)。但这并不是法线纹理中存储的最终值：因为一个向量每个维度的取值范围在(-1, 1)，在法线贴图中被压缩在颜色的范围[0,1]中，所以需要转换：<pre class=\" language-haxe\"><code class=\"language-haxe\">颜色 <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> 法线 <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n线 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>颜色 <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n</code></pre>\n</li>\n<li>这样，之前的法线值(0, 0, 1)实际上对应了法线纹理中RGB的值为(0.5, 0.5, 1)，而这个颜色也就是法线纹理中那大片的蓝色。这些蓝色实际上说明<strong>顶点的大部分法线是和模型本身法线一样</strong>的，不需要改变。总结一下就是，<code>法线纹理的RGB通道存储了在每个顶点各自的Tangent Space中的法线方向的映射值。</code></li>\n<li>下一个问题：Unity编辑器中加入一张发现贴图，编辑器都会提示把法线纹理的“Texture Type”设置成“Normal Map”，这是为什么呢？是因为这样的设置可以让Unity根据不同平台对纹理进行压缩，当需要法线信息时，再通过UnpackNormal函数对法线纹理进行正确的采样，即<strong>将把颜色通道变成一个适合于实时法向映射的格式。</strong></li>\n<li>再下一个问题：压缩的内容又是什么呢？其实法线贴图只有两个通道是真正必不可少的，因为第三个通道的值可以用另外两个推导出来（法线是单位向量）法线（x,y,z）是一条单位向量。所以知道了x,y,z里的任意两个，剩下的那个就可以通过计算得出。所以我们就可以使用2个通道的图储存x,y,z里的两个值，将xyz里剩余的值省略，通过计算得出。而压缩后的法线贴图，大小只有原来的1/4左右，故可以使用更大或者更多的贴图来提升画面品质。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"重点讲解\">重点讲解<a href=\"post/Unity Shader 入门（三）：编写第一个Shader#重点讲解\"></a></h3><p>回到刚刚打断的地方，下面两句：</p>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">half rim <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>IN<span class=\"token punctuation\">.</span>viewDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>Emission <span class=\"token operator\">=</span> _RimColor<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> <span class=\"token function\">pow</span> <span class=\"token punctuation\">(</span>rim<span class=\"token punctuation\">,</span> _RimStrength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>首先我们看<code>normalize</code>函数：为了对向量进行归一化处理（这里传入IN.viewDir指的是：WorldSpace View Direction，也就是当前坐标的视角方向）。 <code>dot</code>函数：返回传入的两个参数的点积，<code>saturate</code>函数：判断传入的参数是否在0-1之间，如果小于0，返回 0；如果大于 1，返回1； </li>\n<li>接着第二句：<code>_RimColor.rgb * pow (rim, _RimStrength)</code>从_RimColor参数获取自发光颜色再和发光的强度混合，最终将颜色赋值给像素的Emission（发散颜色）</li>\n<li>以上就是边缘发光效果的实现。</li>\n</ul>\n<h2 id=\"结语\">结语<a href=\"post/Unity Shader 入门（三）：编写第一个Shader#结语\"></a></h2><p>下一次的shader我们将来写【半透明】的边缘发光效果。为此在下一篇我们将会梳理一下Unity shader透明效果的知识储配</p>\n","prev":{"title":"Unity Shader 入门（四）：透明效果知识储备","slug":"Unity Shader 入门（四）：透明效果知识储备"},"next":{"title":"Unity Shader 入门（二）：查看第一个Shader","slug":"Unity Shader 入门（二）：查看第一个Shader"},"link":"http://yoursite.com/post/Unity Shader 入门（三）：编写第一个Shader/","toc":[{"title":"编写第一个Shader","id":"编写第一个Shader","index":"1","children":[{"title":"实现原理：","id":"实现原理：","index":"1.1"},{"title":"具体解说：","id":"具体解说：","index":"1.2","children":[{"title":"","id":"有关法线贴图","index":"1.2.1"}]},{"title":"重点讲解","id":"重点讲解","index":"1.3"}]},{"title":"结语","id":"结语","index":"2"}]}