{"title":"Unity Shader 入门（六）：模型描边Shader","date":"2018-02-07T16:00:00.000Z","thumbnail":"https://github.com/kurong00/blog/blob/master/thumbnail/shader6/shader6.png?raw=true","slug":"Unity Shader 入门（六）：模型描边Shader","categories":["Shader"],"updated":"2019-05-01T01:49:24.177Z","content":"<h2 id=\"导语\">导语<a href=\"post/Unity Shader 入门（六）：模型描边Shader#导语\"></a></h2><p>前面几篇我们写了几个边缘发光的shader，另外一个类似功能的就是模型描边，和边缘发光不同的地方在于，描边是在原有模型的基础上，添加一圈的外框。</p>\n<p>老规矩还是来看一下效果图：</p>\n<div class=\"article-img\"><p><img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader6/RimLighting.PNG?raw=true\" alt data-zoomable></p></div>\n<h2 id=\"具体实现\">具体实现<a href=\"post/Unity Shader 入门（六）：模型描边Shader#具体实现\"></a></h2><p>说明一下这个Shader的具体实现：</p>\n<h3 id=\"实现原理：\">实现原理：<a href=\"post/Unity Shader 入门（六）：模型描边Shader#实现原理：\"></a></h3><p>Mesh Doubling (复制网格)： </p>\n<ol>\n<li>需要一个单独的Pass来实现，重新绘制一个将所有表面都<font color=\"#D37885\">沿着法线方向</font>延展模型，挤出一点点，然后将正面剪裁掉，只输出描边的颜色；</li>\n<li>第二个Pass就是一个正常着色的Pass</li>\n</ol>\n<h3 id=\"具体解说：\">具体解说：<a href=\"post/Unity Shader 入门（六）：模型描边Shader#具体解说：\"></a></h3><p>先放一段实现的代码：</p>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">Shader <span class=\"token string\">\"Custom/Rim/RimLighting\"</span> <span class=\"token punctuation\">{</span>\n    Properties<span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_MainColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_OutlineCol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OutlineCol\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_OutlineFactor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OutlineFactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\n        <span class=\"token function\">_MainTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Base 2D\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    SubShader\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//描边使用两个Pass，第一个pass沿法线挤出一点，只输出描边的颜色</span>\n        Pass\n        <span class=\"token punctuation\">{</span>\n            Cull Front\n            CGPROGRAM\n            <span class=\"token preprocessor builtin\">#include</span> <span class=\"token string\">\"UnityCG.cginc\"</span>\n            fixed4 _OutlineCol<span class=\"token punctuation\">;</span>\n            float _OutlineFactor<span class=\"token punctuation\">;</span>\n\n            struct v2f\n            <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token punctuation\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata_full v<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//将法线方向转换到视空间</span>\n                float3 vnormal <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>UNITY_MATRIX_IT_MV<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//将视空间法线xy坐标转化到投影空间，只有xy需要，z深度不需要了</span>\n                float2 offset <span class=\"token operator\">=</span> <span class=\"token function\">TransformViewToProjection</span><span class=\"token punctuation\">(</span>vnormal<span class=\"token punctuation\">.</span>xy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//在最终投影阶段输出进行偏移操作</span>\n                o<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">+</span><span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span> _OutlineFactor<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> SV_Target\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//这个Pass直接输出描边颜色</span>\n                <span class=\"token keyword\">return</span> _OutlineCol<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//使用vert函数和frag函数</span>\n            <span class=\"token preprocessor builtin\">#pragma</span> vertex vert\n            <span class=\"token preprocessor builtin\">#pragma</span> fragment frag\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//正常着色的Pass</span>\n        Pass\n        <span class=\"token punctuation\">{</span>\n            CGPROGRAM\n            <span class=\"token comment\" spellcheck=\"true\">//引入头文件</span>\n            <span class=\"token preprocessor builtin\">#include</span> <span class=\"token string\">\"Lighting.cginc\"</span>\n            <span class=\"token comment\" spellcheck=\"true\">//使用vert函数和frag函数</span>\n            <span class=\"token preprocessor builtin\">#pragma</span> vertex vert\n            <span class=\"token preprocessor builtin\">#pragma</span> fragment frag    \n            <span class=\"token comment\" spellcheck=\"true\">//定义Properties中的变量</span>\n            fixed4 _MainColor<span class=\"token punctuation\">;</span>\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//定义结构体：vertex shader阶段输出的内容</span>\n            struct v2f\n            <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token punctuation\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                float3 worldNormal <span class=\"token punctuation\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//定义顶点shader,参数直接使用appdata_base（包含position, noramal, texcoord）</span>\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata_base v<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//通过TRANSFORM_TEX宏转化纹理坐标，主要处理了Offset和Tiling的改变</span>\n                o<span class=\"token punctuation\">.</span>worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>unity_WorldToObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//定义片元shader</span>\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> SV_Target\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//unity自身的diffuse也是带了环境光，这里我们也增加一下环境光</span>\n                fixed3 ambient <span class=\"token operator\">=</span> UNITY_LIGHTMODEL_AMBIENT<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">*</span> _MainColor<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//归一化法线，即使在vert归一化也不行，从vert到frag阶段有差值处理，传入的法线方向并不是vertex shader直接传出的</span>\n                fixed3 worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>worldNormal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//把光照方向归一化</span>\n                fixed3 worldLightDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>_WorldSpaceLightPos0<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//根据半兰伯特模型计算像素的光照信息</span>\n                fixed3 lambert <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>worldNormal<span class=\"token punctuation\">,</span> worldLightDir<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//最终输出颜色为lambert光强*材质diffuse颜色*光颜色</span>\n                fixed3 diffuse <span class=\"token operator\">=</span> lambert <span class=\"token operator\">*</span> _MainColor<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">*</span> _LightColor0<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">+</span> ambient<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//进行纹理采样</span>\n                fixed4 color <span class=\"token operator\">=</span> _MainColor<span class=\"token punctuation\">;</span>\n                color<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>rgb<span class=\"token operator\">*</span> diffuse<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">fixed4</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    FallBack <span class=\"token string\">\"Diffuse\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>详细的实现，包含在注释之中了。</p>\n<h3 id=\"包含问题\">包含问题<a href=\"post/Unity Shader 入门（六）：模型描边Shader#包含问题\"></a></h3><p>但是这个实现方法有一个问题：<strong>线条并不连续</strong>，在平滑表面的表现尚可（球体，胶囊体等等），但是在锐利的表面上经常会出现断层（比如立方体等等）。还是利用Mesh Doubling (复制网格)的方法，但是不再简单只通过法线方向，而是：<font color=\"#D37885\">不严格地按照表面沿着法线的方向延展, 而是在标准化的点位置和法线方向之间取一个恰当的参数来做插值</font>。</p>\n<h2 id=\"更新方案\">更新方案<a href=\"post/Unity Shader 入门（六）：模型描边Shader#更新方案\"></a></h2><p>修改描边Pass的vert函数：</p>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata_full v<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            v2f o<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span> <span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>vertex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            float3 vnormal1 <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span> <span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">.</span>xyz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//将法线方向转换到视空间</span>\n            float3 vnormal2 <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>UNITY_MATRIX_IT_MV<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vnormal1 <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span> <span class=\"token punctuation\">(</span> vnormal1<span class=\"token punctuation\">,</span> vnormal2<span class=\"token punctuation\">,</span> _Factor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vnormal1 <span class=\"token operator\">=</span> <span class=\"token function\">mul</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> float3x3 <span class=\"token punctuation\">)</span> UNITY_MATRIX_IT_MV<span class=\"token punctuation\">,</span> vnormal1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            float2 offset <span class=\"token operator\">=</span> <span class=\"token function\">TransformViewToProjection</span> <span class=\"token punctuation\">(</span>vnormal1<span class=\"token punctuation\">.</span>xy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            offset <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span> <span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            float dist <span class=\"token operator\">=</span> <span class=\"token function\">distance</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">mul</span> <span class=\"token punctuation\">(</span> UNITY_MATRIX_M<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _WorldSpaceCameraPos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">+</span><span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span>_OutlineFactor<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>其中的_Factor就是用来计算差值的参数，这个可以根据自己调节<code>lerp ( vnormal1, vnormal2, _Factor )</code></p>\n<p>效果是：<img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader6/RimLightingFix.PNG?raw=true\" alt></p>\n<p>最后上一个完整的修复过的Shader方案：</p>\n<pre class=\" language-haxe\"><code class=\"language-haxe\">Shader <span class=\"token string\">\"Custom/Rim/RimLightingFix\"</span> <span class=\"token punctuation\">{</span>\n    Properties<span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_MainColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main Color\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_OutlineCol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OutlineCol\"</span><span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_OutlineFactor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OutlineFactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span>\n        <span class=\"token function\">_MainTex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Base 2D\"</span><span class=\"token punctuation\">,</span> 2D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">_Factor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Control Factor\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span> \n    <span class=\"token punctuation\">}</span>\n    SubShader\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//描边使用两个Pass，第一个pass沿法线挤出一点，只输出描边的颜色</span>\n        Pass<span class=\"token punctuation\">{</span>\n        Cull Front\n        CGPROGRAM\n        <span class=\"token preprocessor builtin\">#include</span> <span class=\"token string\">\"UnityCG.cginc\"</span>\n        <span class=\"token comment\" spellcheck=\"true\">//使用vert函数和frag函数</span>\n        <span class=\"token preprocessor builtin\">#pragma</span> vertex vert\n        <span class=\"token preprocessor builtin\">#pragma</span> fragment frag\n        fixed4 _OutlineCol<span class=\"token punctuation\">;</span>\n        float _OutlineFactor<span class=\"token punctuation\">;</span>\n        float _Factor<span class=\"token punctuation\">;</span>    \n        struct v2f\n        <span class=\"token punctuation\">{</span>\n            float4 pos <span class=\"token punctuation\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata_full v<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            v2f o<span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span> <span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>vertex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            float3 vnormal1 <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span> <span class=\"token punctuation\">(</span> v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">.</span>xyz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//将法线方向转换到视空间</span>\n            float3 vnormal2 <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>UNITY_MATRIX_IT_MV<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vnormal1 <span class=\"token operator\">=</span> <span class=\"token function\">lerp</span> <span class=\"token punctuation\">(</span> vnormal1<span class=\"token punctuation\">,</span> vnormal2<span class=\"token punctuation\">,</span> _Factor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vnormal1 <span class=\"token operator\">=</span> <span class=\"token function\">mul</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> float3x3 <span class=\"token punctuation\">)</span> UNITY_MATRIX_IT_MV<span class=\"token punctuation\">,</span> vnormal1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            float2 offset <span class=\"token operator\">=</span> <span class=\"token function\">TransformViewToProjection</span> <span class=\"token punctuation\">(</span>vnormal1<span class=\"token punctuation\">.</span>xy <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            offset <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span> <span class=\"token punctuation\">(</span> offset <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            float dist <span class=\"token operator\">=</span> <span class=\"token function\">distance</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">mul</span> <span class=\"token punctuation\">(</span> UNITY_MATRIX_M<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>vertex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _WorldSpaceCameraPos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>xy <span class=\"token operator\">+</span><span class=\"token operator\">=</span> offset <span class=\"token operator\">*</span>_OutlineFactor<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> SV_Target\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//这个Pass直接输出描边颜色</span>\n            <span class=\"token keyword\">return</span> _OutlineCol<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ENDCG\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//正常着色的Pass</span>\n        Pass\n        <span class=\"token punctuation\">{</span>\n            CGPROGRAM\n            <span class=\"token comment\" spellcheck=\"true\">//引入头文件</span>\n            <span class=\"token preprocessor builtin\">#include</span> <span class=\"token string\">\"Lighting.cginc\"</span>\n            <span class=\"token comment\" spellcheck=\"true\">//使用vert函数和frag函数</span>\n            <span class=\"token preprocessor builtin\">#pragma</span> vertex vert\n            <span class=\"token preprocessor builtin\">#pragma</span> fragment frag    \n            <span class=\"token comment\" spellcheck=\"true\">//定义Properties中的变量</span>\n            fixed4 _MainColor<span class=\"token punctuation\">;</span>\n            sampler2D _MainTex<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//定义结构体：vertex shader阶段输出的内容</span>\n            struct v2f\n            <span class=\"token punctuation\">{</span>\n                float4 pos <span class=\"token punctuation\">:</span> SV_POSITION<span class=\"token punctuation\">;</span>\n                float3 worldNormal <span class=\"token punctuation\">:</span> TEXCOORD0<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//定义顶点shader,参数直接使用appdata_base（包含position, noramal, texcoord）</span>\n            v2f <span class=\"token function\">vert</span><span class=\"token punctuation\">(</span>appdata_base v<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                v2f o<span class=\"token punctuation\">;</span>\n                o<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">UnityObjectToClipPos</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//通过TRANSFORM_TEX宏转化纹理坐标，主要处理了Offset和Tiling的改变</span>\n                o<span class=\"token punctuation\">.</span>worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>float3x3<span class=\"token punctuation\">)</span>unity_WorldToObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//定义片元shader</span>\n            fixed4 <span class=\"token function\">frag</span><span class=\"token punctuation\">(</span>v2f i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> SV_Target\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//unity自身的diffuse也是带了环境光，这里我们也增加一下环境光</span>\n                fixed3 ambient <span class=\"token operator\">=</span> UNITY_LIGHTMODEL_AMBIENT<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">*</span> _MainColor<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//归一化法线，即使在vert归一化也不行，从vert到frag阶段有差值处理，传入的法线方向并不是vertex shader直接传出的</span>\n                fixed3 worldNormal <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>worldNormal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//把光照方向归一化</span>\n                fixed3 worldLightDir <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>_WorldSpaceLightPos0<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//根据半兰伯特模型计算像素的光照信息</span>\n                fixed3 lambert <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>worldNormal<span class=\"token punctuation\">,</span> worldLightDir<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//最终输出颜色为lambert光强*材质diffuse颜色*光颜色</span>\n                fixed3 diffuse <span class=\"token operator\">=</span> lambert <span class=\"token operator\">*</span> _MainColor<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">*</span> _LightColor0<span class=\"token punctuation\">.</span>xyz <span class=\"token operator\">+</span> ambient<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//进行纹理采样</span>\n                fixed4 color <span class=\"token operator\">=</span> _MainColor<span class=\"token punctuation\">;</span>\n                color<span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>rgb<span class=\"token operator\">*</span> diffuse<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">fixed4</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ENDCG\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    FallBack <span class=\"token string\">\"Diffuse\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"结语\">结语<a href=\"post/Unity Shader 入门（六）：模型描边Shader#结语\"></a></h2><p>描边常用于一些漫画风格的游戏场景中，能够在复杂的场景中突出被绘制的物体。</p>\n","prev":{"title":"","slug":"Unity Shader 入门（一）：理论准备"},"next":{"title":"Unity Shader 入门（五）：边缘发光透明版","slug":"Unity Shader 入门（五）：边缘发光透明版"},"link":"http://yoursite.com/post/Unity Shader 入门（六）：模型描边Shader/","toc":[{"title":"导语","id":"导语","index":"1"},{"title":"具体实现","id":"具体实现","index":"2","children":[{"title":"实现原理：","id":"实现原理：","index":"2.1"},{"title":"具体解说：","id":"具体解说：","index":"2.2"},{"title":"包含问题","id":"包含问题","index":"2.3"}]},{"title":"更新方案","id":"更新方案","index":"3"},{"title":"结语","id":"结语","index":"4"}]}