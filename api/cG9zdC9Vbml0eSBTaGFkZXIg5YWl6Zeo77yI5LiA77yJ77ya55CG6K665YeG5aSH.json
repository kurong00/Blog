{"title":"","date":"2019-05-01T01:49:24.176Z","slug":"Unity Shader 入门（一）：理论准备","updated":"2019-05-01T01:49:24.176Z","content":"<h1 id=\"Unity-Shader-入门（一）：理论准备\">Unity Shader 入门（一）：理论准备<a href=\"post/Unity Shader 入门（一）：理论准备#Unity-Shader-入门（一）：理论准备\"></a></h1><h2 id=\"1-什么是Shader？\">1. 什么是Shader？<a href=\"post/Unity Shader 入门（一）：理论准备#1-什么是Shader？\"></a></h2><p>shader（着色器）是<font color=\"#560A4A\">GPU的渲染流水线上的一小段程序</font>，它负责将输入的Mesh（网格）以指定的方式，和输入的贴图或者颜色等组合作用后输出。绘图单元可以依据这个输出来将图像绘制到屏幕上。</p>\n<h2 id=\"2-Shader的分类？\">2. Shader的分类？<a href=\"post/Unity Shader 入门（一）：理论准备#2-Shader的分类？\"></a></h2><p>shader大体上可以分为两类：</p>\n<ul>\n<li>表面着色器（Surface Shader）：已经为你做了大部分的工作，只需要简单的编写就可以实现很多不错的效果。</li>\n<li>片元着色器（Fragment Shader）：可以做的事情更多，相应的难度也会加大。可以在比较低的层级上进行更复杂（或者针对目标设备更高效）的开发。 </li>\n</ul>\n<h2 id=\"3-什么是渲染流水线？\">3. 什么是渲染流水线？<a href=\"post/Unity Shader 入门（一）：理论准备#3-什么是渲染流水线？\"></a></h2><p>既然shader所在的阶段是渲染流水线上的一部分，那渲染流水线又是什么呢？ </p>\n<p>首先GPU上的渲染流水线任务是：<font color=\"#560A4A\">从一个三维场景出发，把这些信息最终转换成一张二维图像。</font>我们可以将渲染流水线分成三个阶段：应用阶段-&gt;几何阶段-&gt;光栅化阶段。</p>\n<div class=\"article-img\"><p><img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline.PNG?raw=true\" alt data-zoomable></p></div>\n<p>我们逐一来看三个阶段：</p>\n<h3 id=\"3-1-应用阶段\">3.1 应用阶段<a href=\"post/Unity Shader 入门（一）：理论准备#3-1-应用阶段\"></a></h3><div class=\"article-img\"><p><img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline2.PNG?raw=true\" alt data-zoomable></p></div>\n<p>这个阶段是完全由开发者主导的，主要工作是：</p>\n<ul>\n<li>准备数据：例如相机位置、模型位置、光源位置等等</li>\n<li>粗粒度的剔除工作：把不可见的物体删除出去</li>\n<li>设置渲染状态：例如使用的材质、纹理、shader等等</li>\n<li>输出：需要渲染的几何信息，也就是渲染图元（rendering primitives），渲染图元可以是点、线、面等等，渲染图元就交给下一个几何阶段</li>\n</ul>\n<h3 id=\"几何阶段\">几何阶段<a href=\"post/Unity Shader 入门（一）：理论准备#几何阶段\"></a></h3><div class=\"article-img\"><p><img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline3.PNG?raw=true\" alt data-zoomable></p></div>\n<p>这个阶段用于处理几乎所有我们要绘制的几何相关的事情，比如决定画什么、怎么画、画在哪里等等（这一段主要在GPU上进行），因为事情太多，因此可以进一步细分成一个小的流水线：</p>\n<p>此时到达Vertex Shader，shader会进行一些操作，例如：改变顶点位置，对顶点进行坐标变换(模型空间-&gt;世界空间-&gt;裁剪空间-&gt;屏幕空间)，贴图位置转换等等。  </p>\n<p>下一步开始<strong>图元装配</strong>：将一个个零散的顶点组装成一个个三角形。  </p>\n<p>下一步<strong>曲面细分环节</strong>（可选项，不一定经历这个环节，在Direct3D 11、OpenGL 4、OpenGL ES 3.2以上才支持）：将上一部的图元进行细分。</p>\n<p> 再下一步<strong>几何元着色器</strong>（也是可选项，不一定经历这个环节,在Direct3D 10、OpenGL 3.2、OpenGL ES 3.2以上支持）：增加顶点或者片元数</p>\n<p> 下一步<strong>裁剪</strong>：裁剪位于视锥外的片元</p>\n<p> 最后一步<strong>屏幕映射</strong>：输出屏幕空间的二维坐标和每个顶点的深度值，着色等信息。</p>\n<h3 id=\"光栅化阶段\">光栅化阶段<a href=\"post/Unity Shader 入门（一）：理论准备#光栅化阶段\"></a></h3><div class=\"article-img\"><p><img src=\"https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline4.PNG?raw=true\" alt data-zoomable></p></div>\n<p>将上一步得到的信息(深度值，着色，屏幕坐标等等)进行插值运算，确认哪些像素该被绘制在屏幕上。<br><strong>以上是渲染流水线的一个简单说明，真实的实现过程远比上面描述的复杂，但是好在Unity Shader已经封装了非常多的功能，下一节我们将开始分析第一个Unity Shader。</strong></p>\n","next":{"title":"Unity Shader 入门（六）：模型描边Shader","slug":"Unity Shader 入门（六）：模型描边Shader"},"link":"http://yoursite.com/post/Unity Shader 入门（一）：理论准备/","toc":[{"title":"Unity Shader 入门（一）：理论准备","id":"Unity-Shader-入门（一）：理论准备","index":"1","children":[{"title":"1. 什么是Shader？","id":"1-什么是Shader？","index":"1.1"},{"title":"2. Shader的分类？","id":"2-Shader的分类？","index":"1.2"},{"title":"3. 什么是渲染流水线？","id":"3-什么是渲染流水线？","index":"1.3","children":[{"title":"3.1 应用阶段","id":"3-1-应用阶段","index":"1.3.1"},{"title":"几何阶段","id":"几何阶段","index":"1.3.2"},{"title":"光栅化阶段","id":"光栅化阶段","index":"1.3.3"}]}]}]}