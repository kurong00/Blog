<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/05/01/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%90%86%E8%AE%BA%E5%87%86%E5%A4%87/"/>
      <url>/2019/05/01/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%90%86%E8%AE%BA%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity-Shader-入门（一）：理论准备"><a href="#Unity-Shader-入门（一）：理论准备" class="headerlink" title="Unity Shader 入门（一）：理论准备"></a>Unity Shader 入门（一）：理论准备</h1><h2 id="1-什么是Shader？"><a href="#1-什么是Shader？" class="headerlink" title="1. 什么是Shader？"></a>1. 什么是Shader？</h2><p>shader（着色器）是<font color="#560A4A">GPU的渲染流水线上的一小段程序</font>，它负责将输入的Mesh（网格）以指定的方式，和输入的贴图或者颜色等组合作用后输出。绘图单元可以依据这个输出来将图像绘制到屏幕上。</p><h2 id="2-Shader的分类？"><a href="#2-Shader的分类？" class="headerlink" title="2. Shader的分类？"></a>2. Shader的分类？</h2><p>shader大体上可以分为两类：</p><ul><li>表面着色器（Surface Shader）：已经为你做了大部分的工作，只需要简单的编写就可以实现很多不错的效果。</li><li>片元着色器（Fragment Shader）：可以做的事情更多，相应的难度也会加大。可以在比较低的层级上进行更复杂（或者针对目标设备更高效）的开发。 </li></ul><h2 id="3-什么是渲染流水线？"><a href="#3-什么是渲染流水线？" class="headerlink" title="3. 什么是渲染流水线？"></a>3. 什么是渲染流水线？</h2><p>既然shader所在的阶段是渲染流水线上的一部分，那渲染流水线又是什么呢？ </p><p>首先GPU上的渲染流水线任务是：<font color="#560A4A">从一个三维场景出发，把这些信息最终转换成一张二维图像。</font>我们可以将渲染流水线分成三个阶段：应用阶段-&gt;几何阶段-&gt;光栅化阶段。</p><p><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline.PNG?raw=true" alt></p><p>我们逐一来看三个阶段：</p><h3 id="3-1-应用阶段"><a href="#3-1-应用阶段" class="headerlink" title="3.1 应用阶段"></a>3.1 应用阶段</h3><p><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline2.PNG?raw=true" alt></p><p>这个阶段是完全由开发者主导的，主要工作是：</p><ul><li>准备数据：例如相机位置、模型位置、光源位置等等</li><li>粗粒度的剔除工作：把不可见的物体删除出去</li><li>设置渲染状态：例如使用的材质、纹理、shader等等</li><li>输出：需要渲染的几何信息，也就是渲染图元（rendering primitives），渲染图元可以是点、线、面等等，渲染图元就交给下一个几何阶段</li></ul><h3 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h3><p><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline3.PNG?raw=true" alt></p><p>这个阶段用于处理几乎所有我们要绘制的几何相关的事情，比如决定画什么、怎么画、画在哪里等等（这一段主要在GPU上进行），因为事情太多，因此可以进一步细分成一个小的流水线：</p><p>此时到达Vertex Shader，shader会进行一些操作，例如：改变顶点位置，对顶点进行坐标变换(模型空间-&gt;世界空间-&gt;裁剪空间-&gt;屏幕空间)，贴图位置转换等等。  </p><p>下一步开始<strong>图元装配</strong>：将一个个零散的顶点组装成一个个三角形。  </p><p>下一步<strong>曲面细分环节</strong>（可选项，不一定经历这个环节，在Direct3D 11、OpenGL 4、OpenGL ES 3.2以上才支持）：将上一部的图元进行细分。</p><p> 再下一步<strong>几何元着色器</strong>（也是可选项，不一定经历这个环节,在Direct3D 10、OpenGL 3.2、OpenGL ES 3.2以上支持）：增加顶点或者片元数</p><p> 下一步<strong>裁剪</strong>：裁剪位于视锥外的片元</p><p> 最后一步<strong>屏幕映射</strong>：输出屏幕空间的二维坐标和每个顶点的深度值，着色等信息。</p><h3 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h3><p><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader1/shader1_pipeline4.PNG?raw=true" alt></p><p>将上一步得到的信息(深度值，着色，屏幕坐标等等)进行插值运算，确认哪些像素该被绘制在屏幕上。<br><strong>以上是渲染流水线的一个简单说明，真实的实现过程远比上面描述的复杂，但是好在Unity Shader已经封装了非常多的功能，下一节我们将开始分析第一个Unity Shader。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 入门（六）：模型描边Shader</title>
      <link href="/2018/02/08/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A8%A1%E5%9E%8B%E6%8F%8F%E8%BE%B9Shader/"/>
      <url>/2018/02/08/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A8%A1%E5%9E%8B%E6%8F%8F%E8%BE%B9Shader/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>前面几篇我们写了几个边缘发光的shader，另外一个类似功能的就是模型描边，和边缘发光不同的地方在于，描边是在原有模型的基础上，添加一圈的外框。</p><p>老规矩还是来看一下效果图：</p><p><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader6/RimLighting.PNG?raw=true" alt></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>说明一下这个Shader的具体实现：</p><h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>Mesh Doubling (复制网格)： </p><ol><li>需要一个单独的Pass来实现，重新绘制一个将所有表面都<font color="#D37885">沿着法线方向</font>延展模型，挤出一点点，然后将正面剪裁掉，只输出描边的颜色；</li><li>第二个Pass就是一个正常着色的Pass</li></ol><h3 id="具体解说："><a href="#具体解说：" class="headerlink" title="具体解说："></a>具体解说：</h3><p>先放一段实现的代码：</p><pre class=" language-haxe"><code class="language-haxe">Shader <span class="token string">"Custom/Rim/RimLighting"</span> <span class="token punctuation">{</span>    Properties<span class="token punctuation">{</span>        <span class="token function">_MainColor</span><span class="token punctuation">(</span><span class="token string">"Main Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_OutlineCol</span><span class="token punctuation">(</span><span class="token string">"OutlineCol"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_OutlineFactor</span><span class="token punctuation">(</span><span class="token string">"OutlineFactor"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.1</span>        <span class="token function">_MainTex</span><span class="token punctuation">(</span><span class="token string">"Base 2D"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    SubShader    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//描边使用两个Pass，第一个pass沿法线挤出一点，只输出描边的颜色</span>        Pass        <span class="token punctuation">{</span>            Cull Front            CGPROGRAM            <span class="token preprocessor builtin">#include</span> <span class="token string">"UnityCG.cginc"</span>            fixed4 _OutlineCol<span class="token punctuation">;</span>            float _OutlineFactor<span class="token punctuation">;</span>            struct v2f            <span class="token punctuation">{</span>                float4 pos <span class="token punctuation">:</span> SV_POSITION<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            v2f <span class="token function">vert</span><span class="token punctuation">(</span>appdata_full v<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2f o<span class="token punctuation">;</span>                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将法线方向转换到视空间</span>                float3 vnormal <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>UNITY_MATRIX_IT_MV<span class="token punctuation">,</span> v<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将视空间法线xy坐标转化到投影空间，只有xy需要，z深度不需要了</span>                float2 offset <span class="token operator">=</span> <span class="token function">TransformViewToProjection</span><span class="token punctuation">(</span>vnormal<span class="token punctuation">.</span>xy<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//在最终投影阶段输出进行偏移操作</span>                o<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>xy <span class="token operator">+</span><span class="token operator">=</span> offset <span class="token operator">*</span> _OutlineFactor<span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token punctuation">:</span> SV_Target            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//这个Pass直接输出描边颜色</span>                <span class="token keyword">return</span> _OutlineCol<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//使用vert函数和frag函数</span>            <span class="token preprocessor builtin">#pragma</span> vertex vert            <span class="token preprocessor builtin">#pragma</span> fragment frag            ENDCG        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//正常着色的Pass</span>        Pass        <span class="token punctuation">{</span>            CGPROGRAM            <span class="token comment" spellcheck="true">//引入头文件</span>            <span class="token preprocessor builtin">#include</span> <span class="token string">"Lighting.cginc"</span>            <span class="token comment" spellcheck="true">//使用vert函数和frag函数</span>            <span class="token preprocessor builtin">#pragma</span> vertex vert            <span class="token preprocessor builtin">#pragma</span> fragment frag                <span class="token comment" spellcheck="true">//定义Properties中的变量</span>            fixed4 _MainColor<span class="token punctuation">;</span>            sampler2D _MainTex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义结构体：vertex shader阶段输出的内容</span>            struct v2f            <span class="token punctuation">{</span>                float4 pos <span class="token punctuation">:</span> SV_POSITION<span class="token punctuation">;</span>                float3 worldNormal <span class="token punctuation">:</span> TEXCOORD0<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义顶点shader,参数直接使用appdata_base（包含position, noramal, texcoord）</span>            v2f <span class="token function">vert</span><span class="token punctuation">(</span>appdata_base v<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2f o<span class="token punctuation">;</span>                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通过TRANSFORM_TEX宏转化纹理坐标，主要处理了Offset和Tiling的改变</span>                o<span class="token punctuation">.</span>worldNormal <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normal<span class="token punctuation">,</span> <span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//定义片元shader</span>            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token punctuation">:</span> SV_Target            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//unity自身的diffuse也是带了环境光，这里我们也增加一下环境光</span>                fixed3 ambient <span class="token operator">=</span> UNITY_LIGHTMODEL_AMBIENT<span class="token punctuation">.</span>xyz <span class="token operator">*</span> _MainColor<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//归一化法线，即使在vert归一化也不行，从vert到frag阶段有差值处理，传入的法线方向并不是vertex shader直接传出的</span>                fixed3 worldNormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>worldNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把光照方向归一化</span>                fixed3 worldLightDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceLightPos0<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//根据半兰伯特模型计算像素的光照信息</span>                fixed3 lambert <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token function">dot</span><span class="token punctuation">(</span>worldNormal<span class="token punctuation">,</span> worldLightDir<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//最终输出颜色为lambert光强*材质diffuse颜色*光颜色</span>                fixed3 diffuse <span class="token operator">=</span> lambert <span class="token operator">*</span> _MainColor<span class="token punctuation">.</span>xyz <span class="token operator">*</span> _LightColor0<span class="token punctuation">.</span>xyz <span class="token operator">+</span> ambient<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//进行纹理采样</span>                fixed4 color <span class="token operator">=</span> _MainColor<span class="token punctuation">;</span>                color<span class="token punctuation">.</span>rgb <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb<span class="token operator">*</span> diffuse<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ENDCG        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    FallBack <span class="token string">"Diffuse"</span><span class="token punctuation">}</span></code></pre><p>详细的实现，包含在注释之中了。</p><h3 id="包含问题"><a href="#包含问题" class="headerlink" title="包含问题"></a>包含问题</h3><p>但是这个实现方法有一个问题：<strong>线条并不连续</strong>，在平滑表面的表现尚可（球体，胶囊体等等），但是在锐利的表面上经常会出现断层（比如立方体等等）。还是利用Mesh Doubling (复制网格)的方法，但是不再简单只通过法线方向，而是：<font color="#D37885">不严格地按照表面沿着法线的方向延展, 而是在标准化的点位置和法线方向之间取一个恰当的参数来做插值</font>。</p><h2 id="更新方案"><a href="#更新方案" class="headerlink" title="更新方案"></a>更新方案</h2><p>修改描边Pass的vert函数：</p><pre class=" language-haxe"><code class="language-haxe">v2f <span class="token function">vert</span><span class="token punctuation">(</span>appdata_full v<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            v2f o<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span> <span class="token punctuation">(</span> v<span class="token punctuation">.</span>vertex <span class="token punctuation">)</span><span class="token punctuation">;</span>            float3 vnormal1 <span class="token operator">=</span> <span class="token function">normalize</span> <span class="token punctuation">(</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">.</span>xyz <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将法线方向转换到视空间</span>            float3 vnormal2 <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>UNITY_MATRIX_IT_MV<span class="token punctuation">,</span> v<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>            vnormal1 <span class="token operator">=</span> <span class="token function">lerp</span> <span class="token punctuation">(</span> vnormal1<span class="token punctuation">,</span> vnormal2<span class="token punctuation">,</span> _Factor <span class="token punctuation">)</span><span class="token punctuation">;</span>            vnormal1 <span class="token operator">=</span> <span class="token function">mul</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> float3x3 <span class="token punctuation">)</span> UNITY_MATRIX_IT_MV<span class="token punctuation">,</span> vnormal1<span class="token punctuation">)</span><span class="token punctuation">;</span>            float2 offset <span class="token operator">=</span> <span class="token function">TransformViewToProjection</span> <span class="token punctuation">(</span>vnormal1<span class="token punctuation">.</span>xy <span class="token punctuation">)</span><span class="token punctuation">;</span>            offset <span class="token operator">=</span> <span class="token function">normalize</span> <span class="token punctuation">(</span> offset <span class="token punctuation">)</span><span class="token punctuation">;</span>            float dist <span class="token operator">=</span> <span class="token function">distance</span> <span class="token punctuation">(</span> <span class="token function">mul</span> <span class="token punctuation">(</span> UNITY_MATRIX_M<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex <span class="token punctuation">)</span><span class="token punctuation">,</span> _WorldSpaceCameraPos <span class="token punctuation">)</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>xy <span class="token operator">+</span><span class="token operator">=</span> offset <span class="token operator">*</span>_OutlineFactor<span class="token punctuation">;</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>其中的_Factor就是用来计算差值的参数，这个可以根据自己调节<code>lerp ( vnormal1, vnormal2, _Factor )</code></p><p>效果是：<img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader6/RimLightingFix.PNG?raw=true" alt></p><p>最后上一个完整的修复过的Shader方案：</p><pre class=" language-haxe"><code class="language-haxe">Shader <span class="token string">"Custom/Rim/RimLightingFix"</span> <span class="token punctuation">{</span>    Properties<span class="token punctuation">{</span>        <span class="token function">_MainColor</span><span class="token punctuation">(</span><span class="token string">"Main Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_OutlineCol</span><span class="token punctuation">(</span><span class="token string">"OutlineCol"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_OutlineFactor</span><span class="token punctuation">(</span><span class="token string">"OutlineFactor"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.1</span>        <span class="token function">_MainTex</span><span class="token punctuation">(</span><span class="token string">"Base 2D"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">_Factor</span><span class="token punctuation">(</span><span class="token string">"Control Factor"</span><span class="token punctuation">,</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.1</span>     <span class="token punctuation">}</span>    SubShader    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//描边使用两个Pass，第一个pass沿法线挤出一点，只输出描边的颜色</span>        Pass<span class="token punctuation">{</span>        Cull Front        CGPROGRAM        <span class="token preprocessor builtin">#include</span> <span class="token string">"UnityCG.cginc"</span>        <span class="token comment" spellcheck="true">//使用vert函数和frag函数</span>        <span class="token preprocessor builtin">#pragma</span> vertex vert        <span class="token preprocessor builtin">#pragma</span> fragment frag        fixed4 _OutlineCol<span class="token punctuation">;</span>        float _OutlineFactor<span class="token punctuation">;</span>        float _Factor<span class="token punctuation">;</span>            struct v2f        <span class="token punctuation">{</span>            float4 pos <span class="token punctuation">:</span> SV_POSITION<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        v2f <span class="token function">vert</span><span class="token punctuation">(</span>appdata_full v<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            v2f o<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span> <span class="token punctuation">(</span> v<span class="token punctuation">.</span>vertex <span class="token punctuation">)</span><span class="token punctuation">;</span>            float3 vnormal1 <span class="token operator">=</span> <span class="token function">normalize</span> <span class="token punctuation">(</span> v<span class="token punctuation">.</span>vertex<span class="token punctuation">.</span>xyz <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将法线方向转换到视空间</span>            float3 vnormal2 <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>UNITY_MATRIX_IT_MV<span class="token punctuation">,</span> v<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>            vnormal1 <span class="token operator">=</span> <span class="token function">lerp</span> <span class="token punctuation">(</span> vnormal1<span class="token punctuation">,</span> vnormal2<span class="token punctuation">,</span> _Factor <span class="token punctuation">)</span><span class="token punctuation">;</span>            vnormal1 <span class="token operator">=</span> <span class="token function">mul</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> float3x3 <span class="token punctuation">)</span> UNITY_MATRIX_IT_MV<span class="token punctuation">,</span> vnormal1<span class="token punctuation">)</span><span class="token punctuation">;</span>            float2 offset <span class="token operator">=</span> <span class="token function">TransformViewToProjection</span> <span class="token punctuation">(</span>vnormal1<span class="token punctuation">.</span>xy <span class="token punctuation">)</span><span class="token punctuation">;</span>            offset <span class="token operator">=</span> <span class="token function">normalize</span> <span class="token punctuation">(</span> offset <span class="token punctuation">)</span><span class="token punctuation">;</span>            float dist <span class="token operator">=</span> <span class="token function">distance</span> <span class="token punctuation">(</span> <span class="token function">mul</span> <span class="token punctuation">(</span> UNITY_MATRIX_M<span class="token punctuation">,</span> v<span class="token punctuation">.</span>vertex <span class="token punctuation">)</span><span class="token punctuation">,</span> _WorldSpaceCameraPos <span class="token punctuation">)</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>xy <span class="token operator">+</span><span class="token operator">=</span> offset <span class="token operator">*</span>_OutlineFactor<span class="token punctuation">;</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token punctuation">:</span> SV_Target        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这个Pass直接输出描边颜色</span>            <span class="token keyword">return</span> _OutlineCol<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ENDCG        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//正常着色的Pass</span>        Pass        <span class="token punctuation">{</span>            CGPROGRAM            <span class="token comment" spellcheck="true">//引入头文件</span>            <span class="token preprocessor builtin">#include</span> <span class="token string">"Lighting.cginc"</span>            <span class="token comment" spellcheck="true">//使用vert函数和frag函数</span>            <span class="token preprocessor builtin">#pragma</span> vertex vert            <span class="token preprocessor builtin">#pragma</span> fragment frag                <span class="token comment" spellcheck="true">//定义Properties中的变量</span>            fixed4 _MainColor<span class="token punctuation">;</span>            sampler2D _MainTex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义结构体：vertex shader阶段输出的内容</span>            struct v2f            <span class="token punctuation">{</span>                float4 pos <span class="token punctuation">:</span> SV_POSITION<span class="token punctuation">;</span>                float3 worldNormal <span class="token punctuation">:</span> TEXCOORD0<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义顶点shader,参数直接使用appdata_base（包含position, noramal, texcoord）</span>            v2f <span class="token function">vert</span><span class="token punctuation">(</span>appdata_base v<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2f o<span class="token punctuation">;</span>                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通过TRANSFORM_TEX宏转化纹理坐标，主要处理了Offset和Tiling的改变</span>                o<span class="token punctuation">.</span>worldNormal <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normal<span class="token punctuation">,</span> <span class="token punctuation">(</span>float3x3<span class="token punctuation">)</span>unity_WorldToObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//定义片元shader</span>            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span>v2f i<span class="token punctuation">)</span> <span class="token punctuation">:</span> SV_Target            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//unity自身的diffuse也是带了环境光，这里我们也增加一下环境光</span>                fixed3 ambient <span class="token operator">=</span> UNITY_LIGHTMODEL_AMBIENT<span class="token punctuation">.</span>xyz <span class="token operator">*</span> _MainColor<span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//归一化法线，即使在vert归一化也不行，从vert到frag阶段有差值处理，传入的法线方向并不是vertex shader直接传出的</span>                fixed3 worldNormal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>worldNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把光照方向归一化</span>                fixed3 worldLightDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceLightPos0<span class="token punctuation">.</span>xyz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//根据半兰伯特模型计算像素的光照信息</span>                fixed3 lambert <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token function">dot</span><span class="token punctuation">(</span>worldNormal<span class="token punctuation">,</span> worldLightDir<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//最终输出颜色为lambert光强*材质diffuse颜色*光颜色</span>                fixed3 diffuse <span class="token operator">=</span> lambert <span class="token operator">*</span> _MainColor<span class="token punctuation">.</span>xyz <span class="token operator">*</span> _LightColor0<span class="token punctuation">.</span>xyz <span class="token operator">+</span> ambient<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//进行纹理采样</span>                fixed4 color <span class="token operator">=</span> _MainColor<span class="token punctuation">;</span>                color<span class="token punctuation">.</span>rgb <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb<span class="token operator">*</span> diffuse<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ENDCG        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    FallBack <span class="token string">"Diffuse"</span><span class="token punctuation">}</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>描边常用于一些漫画风格的游戏场景中，能够在复杂的场景中突出被绘制的物体。</p>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 入门（五）：边缘发光透明版</title>
      <link href="/2017/11/25/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%BE%B9%E7%BC%98%E5%8F%91%E5%85%89%E9%80%8F%E6%98%8E%E7%89%88/"/>
      <url>/2017/11/25/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%BE%B9%E7%BC%98%E5%8F%91%E5%85%89%E9%80%8F%E6%98%8E%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>之前我们写过一个边缘发光的Shader（<a href="http://chenwenling.cn/2017/11/13/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAShader/" target="_blank" rel="noopener">传送门</a>），这一次我们来写这个的升级版：透明物体的边缘发光。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>首先我们还是来看一下效果图：<br><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader5/RimEnerge.PNG?raw=true" alt></p><h2 id="Shader代码"><a href="#Shader代码" class="headerlink" title="Shader代码"></a>Shader代码</h2><pre class=" language-haxe"><code class="language-haxe">Shader <span class="token string">"Custom/Rim/RimEnerge"</span> <span class="token punctuation">{</span>    Properties    <span class="token punctuation">{</span>        <span class="token function">_Color</span><span class="token punctuation">(</span><span class="token string">"Main Color"</span><span class="token punctuation">,</span>Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_AlphaRange</span><span class="token punctuation">(</span><span class="token string">"Alpha Range"</span><span class="token punctuation">,</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token function">_RimColor</span><span class="token punctuation">(</span><span class="token string">"Rim Color"</span><span class="token punctuation">,</span>Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    SubShader    <span class="token punctuation">{</span>        Tags<span class="token punctuation">{</span>             <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span>            <span class="token string">"IgnoreProjector"</span><span class="token operator">=</span><span class="token string">"True"</span>            <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>            ZWrite Off         Blend SrcAlpha OneMinusSrcAlpha         LOD <span class="token number">200</span>                 Pass        <span class="token punctuation">{</span>            CGPROGRAM            <span class="token preprocessor builtin">#pragma</span> vertex vert            <span class="token preprocessor builtin">#pragma</span> fragment frag            <span class="token preprocessor builtin">#include</span> <span class="token string">"Lighting.cginc"</span>                  struct a2v            <span class="token punctuation">{</span>                float4 vertex <span class="token punctuation">:</span> POSITION<span class="token punctuation">;</span>                float3 normal <span class="token punctuation">:</span> NORMAL<span class="token punctuation">;</span>                         <span class="token punctuation">}</span><span class="token punctuation">;</span>            struct v2f            <span class="token punctuation">{</span>                float4 pos <span class="token punctuation">:</span> SV_POSITION<span class="token punctuation">;</span>                float3 normalDir <span class="token punctuation">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 worldPos <span class="token punctuation">:</span> TEXCOORD1<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            fixed4 _Color<span class="token punctuation">;</span>            float _AlphaRange<span class="token punctuation">;</span>            fixed4 _RimColor<span class="token punctuation">;</span>            v2f <span class="token function">vert</span><span class="token punctuation">(</span> a2v v <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2f o<span class="token punctuation">;</span>                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span> <span class="token punctuation">;</span>                o<span class="token punctuation">.</span>normalDir <span class="token operator">=</span> <span class="token function">UnityObjectToWorldNormal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>                 o<span class="token punctuation">.</span>worldPos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span> v2f v <span class="token punctuation">)</span><span class="token punctuation">:</span>COLOR            <span class="token punctuation">{</span>                float3 normal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normalDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                float3 viewDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceCameraPos <span class="token operator">-</span> v<span class="token punctuation">.</span>worldPos<span class="token punctuation">)</span><span class="token punctuation">;</span>                float normalDotViewDir <span class="token operator">=</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>normal<span class="token punctuation">,</span>viewDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fixed3 diffuse <span class="token operator">=</span> normalDotViewDir <span class="token operator">*</span>_Color<span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span>diffuse <span class="token operator">+</span> _RimColor <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> normalDotViewDir<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> _AlphaRange<span class="token punctuation">)</span> <span class="token operator">+</span> _AlphaRange<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ENDCG        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Fallback <span class="token string">"Diffuse"</span><span class="token punctuation">}</span></code></pre><h2 id="透明度混合"><a href="#透明度混合" class="headerlink" title="透明度混合"></a>透明度混合</h2><p>上一篇我们了解了透明度混合的原理以及一些透明度知识（<a href="http://chenwenling.cn/2017/11/18/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/" target="_blank" rel="noopener">传送门</a>），而Unity中，为了进行透明度混合，我们需要用到【Blend】命令： </p><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Blend Off</td><td style="text-align:center">关闭混合（这是默认的状态）</td></tr><tr><td style="text-align:center">Blend SrcFactor DstFactor</td><td style="text-align:center">开启混合，该片元产生的颜色<em>SrcFactor. 已存在于屏幕的颜色 </em>DstFactor，然后将两者叠加在一起存入颜色缓冲。</td></tr><tr><td style="text-align:center">Blend SrcFactor DstFactor, SrcFactorA DstFactorA</td><td style="text-align:center">原理同上，不过使用了不同的混合因子</td></tr><tr><td style="text-align:center">BlendOp Op</td><td style="text-align:center">不同于上面的颜色混合，而是使用Blend Operation（<a href="https://docs.unity3d.com/Manual/SL-Blend.html" target="_blank" rel="noopener">传送门</a>）来对它们进行操作</td></tr><tr><td style="text-align:center">BlendOp OpColor, OpAlpha</td><td style="text-align:center">原理同上，不过采用不同的Blend Operation来操作Color和Alpha的通道</td></tr></tbody></table><p>混合因子：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">One</td><td style="text-align:center">因子为1，表示让源颜色或者目标颜色通过</td></tr><tr><td style="text-align:center">Zero</td><td style="text-align:center">因子为0，用来删除源颜色或者目标颜色</td></tr><tr><td style="text-align:center">SrcColor</td><td style="text-align:center">因子为源颜色</td></tr><tr><td style="text-align:center">SrcAlpha</td><td style="text-align:center">因子为源颜色的透明度</td></tr><tr><td style="text-align:center">DstColor</td><td style="text-align:center">因子为目标颜色</td></tr><tr><td style="text-align:center">DstAlpha</td><td style="text-align:center">因子为目标颜色的透明度</td></tr><tr><td style="text-align:center">OneMinusSrcColor</td><td style="text-align:center">因子为 (1 - 源颜色) 的值</td></tr><tr><td style="text-align:center">OneMinusSrcAlpha</td><td style="text-align:center">因子为 (1 - 源颜色的透明度) 的值</td></tr><tr><td style="text-align:center">OneMinusDstColor</td><td style="text-align:center">因子为 (1 - 目标颜色) 的值</td></tr><tr><td style="text-align:center">OneMinusDstAlpha</td><td style="text-align:center">因子为 (1 - 目标颜色的透明度) 的值</td></tr></tbody></table><p>此时我们再来看上面这一块代码：</p><pre class=" language-haxe"><code class="language-haxe">Tags<span class="token punctuation">{</span>         <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span>        <span class="token string">"IgnoreProjector"</span><span class="token operator">=</span><span class="token string">"True"</span>        <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>            ZWrite Off         Blend SrcAlpha OneMinusSrcAlpha         LOD <span class="token number">200</span>    </code></pre><ul><li>这里有一些新的知识：之前提过半透明物体的渲染序列要设置成<code>&quot;Queue&quot;=&quot;Transparent&quot;</code>,而<code>&quot;RenderType&quot;=&quot;Transparent&quot;</code>表示我们使用了透明度混合。通常一个半透明的Shader Tags都包含这三条：<pre class=" language-haxe"><code class="language-haxe">      <span class="token string">"Queue"</span><span class="token operator">=</span><span class="token string">"Transparent"</span>      <span class="token string">"IgnoreProjector"</span><span class="token operator">=</span><span class="token string">"True"</span>      <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Transparent"</span></code></pre></li><li>接下来是  <code>ZWrite Off</code> : 我们在上一篇介绍过为什么透明度混合需要关闭深度写入</li><li>最后是  <code>Blend SrcAlpha OneMinusSrcAlpha</code> : 这里我们将源颜色的混合因子设置成<code>SrcAlpha</code>，将目标颜色的混合因子设置成 <code>OneMinusSrcAlpha</code> 以得到半透明效果。</li></ul><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><pre class=" language-haxe"><code class="language-haxe">            struct a2v            <span class="token punctuation">{</span>                float4 vertex <span class="token punctuation">:</span> POSITION<span class="token punctuation">;</span>                float3 normal <span class="token punctuation">:</span> NORMAL<span class="token punctuation">;</span>                         <span class="token punctuation">}</span><span class="token punctuation">;</span>            struct v2f            <span class="token punctuation">{</span>                float4 pos <span class="token punctuation">:</span> SV_POSITION<span class="token punctuation">;</span>                float3 normalDir <span class="token punctuation">:</span> TEXCOORD0<span class="token punctuation">;</span>                float3 worldPos <span class="token punctuation">:</span> TEXCOORD1<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="a2v-：包含顶点着色器要的模型数据"><a href="#a2v-：包含顶点着色器要的模型数据" class="headerlink" title="a2v ：包含顶点着色器要的模型数据"></a>a2v ：包含顶点着色器要的模型数据</h3><ul><li><code>float4 vertex : POSITION;</code>这一句表示：用模型顶点的坐标填充vertex变量。 </li><li><code>float3 normal : NORMAL;</code> 这一句表示：用模型空间的法线方向向量填充normal变量</li></ul><h3 id="v2f-：用于顶点着色器和片元着色器之间传递信息"><a href="#v2f-：用于顶点着色器和片元着色器之间传递信息" class="headerlink" title="v2f ：用于顶点着色器和片元着色器之间传递信息"></a>v2f ：用于顶点着色器和片元着色器之间传递信息</h3><ul><li><code>float4 pos : SV_POSITION;</code>这一句表示：用裁剪空间的位置信息填充pos变量</li><li><code>float3 normalDir : TEXCOORD0;</code>这一句表示：用模型的第一套纹理坐标填充normalDir变量</li><li><code>float3 worldPos : TEXCOORD1;</code>这一句表示：用模型的第二套纹理坐标填充worldPos变量</li></ul><h2 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h2><pre class=" language-haxe"><code class="language-haxe">            v2f <span class="token function">vert</span><span class="token punctuation">(</span> a2v v <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v2f o<span class="token punctuation">;</span>                o<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token function">UnityObjectToClipPos</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                o<span class="token punctuation">.</span>normalDir <span class="token operator">=</span> <span class="token function">UnityObjectToWorldNormal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>                 o<span class="token punctuation">.</span>worldPos <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>unity_ObjectToWorld<span class="token punctuation">,</span>v<span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">.</span>xyz<span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><ul><li><code>UnityObjectToClipPos(v.vertex)</code>是Unity5.6之后的写法，之前是<code>mul(UNITY_MATRIX_MVP,v.vertex)</code> 这一句的意思是:将模型空间的顶点信息转换到裁剪空间中的位置信息，然后将信息存储在o.pos中。</li><li><code>UnityObjectToWorldNormal(v.normal)</code>这一句的意思是:法线从模型空间变换到世界空间中并计算物体在世界空间中的法线坐标。</li><li><code>mul(unity_ObjectToWorld,v.vertex).xyz;</code>这一句的意思是：将顶点从模型空间转换到世界空间的信息存储到worldPos变量中。</li></ul><h2 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h2><pre class=" language-haxe"><code class="language-haxe">            fixed4 <span class="token function">frag</span><span class="token punctuation">(</span> v2f v <span class="token punctuation">)</span><span class="token punctuation">:</span>COLOR            <span class="token punctuation">{</span>                float3 normal <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>normalDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                float3 viewDir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>_WorldSpaceCameraPos <span class="token operator">-</span> v<span class="token punctuation">.</span>worldPos<span class="token punctuation">)</span><span class="token punctuation">;</span>                float normalDotViewDir <span class="token operator">=</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>normal<span class="token punctuation">,</span>viewDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fixed3 diffuse <span class="token operator">=</span> normalDotViewDir <span class="token operator">*</span>_Color<span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">fixed4</span><span class="token punctuation">(</span>diffuse <span class="token operator">+</span> _RimColor <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> normalDotViewDir<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> _AlphaRange<span class="token punctuation">)</span> <span class="token operator">+</span> _AlphaRange<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><ul><li><code>fixed4 frag( v2f v ):COLOR</code>  我们注意到片元着色器的后面跟着<code>:COLOR</code> ：这是Unity提供的Cg/HLSL语义。语义可以告诉shader数据的来源以及数据的输出。</li><li><code>float3 viewDir = normalize(_WorldSpaceCameraPos - v.worldPos);</code> 这里我们用<code>对象在世界坐标系中的位置</code>减去<code>摄像机的世界空间位置</code>，并进行逐顶点归一化，赋给视线的方向</li><li><code>float normalDotViewDir = saturate(dot(normal,viewDir))</code> 我们获得法线与视线的夹角</li><li><code>fixed3 diffuse = normalDotViewDir *_Color;</code> 这里我们视线与法线的夹角和主颜色相乘。</li><li><code>return fixed4(diffuse + _RimColor ,(1 - normalDotViewDir) * (1 - _AlphaRange) + _AlphaRange);</code> 最后将混合后的颜色输出。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 入门（四）：透明效果知识储备</title>
      <link href="/2017/11/18/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
      <url>/2017/11/18/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>首先一个问题：如果场景中有非常多的物体，彼此之间有互相遮挡的情况，那么这些物体是按照什么样的渲染顺序进行渲染的呢？</p><h3 id="深度缓冲"><a href="#深度缓冲" class="headerlink" title="深度缓冲"></a>深度缓冲</h3><p>实际上，由于深度缓存（z-buffer）的存在,不透明的物体在不考虑渲染顺序的情况下也可以正确的被渲染。深度缓冲是用来解决物体可见性的问题，基本思想是：根据深度缓存里的值判断这个物体距离摄像机的距离。开始渲染一个片元的时候，需要把它的深度值和已存在于深度缓存中的值作比较，如果它的值距离摄像机更远那么就不会被渲染到屏幕上。否则更新片元的深度值到深度缓存中。</p><h2 id="透明效果"><a href="#透明效果" class="headerlink" title="透明效果"></a>透明效果</h2><p>我们可以不关心不透明物体的渲染顺序，因为在深度测试中就可以测试出物体离摄像机的距离再判断是否写入颜色缓冲。但是对于不透明物体，就没这么简单了。想要达到半透明的效果，我们要利用透明度混合。</p><h3 id="透明度混合"><a href="#透明度混合" class="headerlink" title="透明度混合"></a>透明度混合</h3><p>透明度混合要关闭深度写入。这是因为：假如一个半透明物体在一个不透明物体的前面，如果开启深度写入的话，距离摄像机更远的不透明物体就会被剔除，但是依照常理我们是可以透过半透明的物体看到不透明的物体。但是这就破坏了深度缓冲的机制，这是非常不好但是不得不做的折中方法，也因此使得渲染顺序变得非常重要。（注意：关闭深度写入，但是没有关闭深度测试）</p><h3 id="渲染顺序"><a href="#渲染顺序" class="headerlink" title="渲染顺序"></a>渲染顺序</h3><p>我们考虑两种情况：</p><ol><li>既有半透明物体也有不透明物体：我们先渲染所有的不透明物体再渲染半透明物体</li><li>全是半透明物体：开启深度测试，关闭深度写入的情况下将半透明物体按照距离摄像机的远近从后往前渲染。<ul><li>这里有一个小问题，深度缓冲中的值是像素级别的，而一个半透明物体很可能有非常多个像素，这么一来每一个像素的深度值都可能不一样，以此会产生<font color="#D37885"> 循环遮挡</font>的情况。</li><li>为了规避上面的问题，常常会把大的模型分割成小的几块，这样即使出现渲染错误，也不会出现太出格的结果。</li></ul></li></ol><h3 id="Unity设置的渲染序列"><a href="#Unity设置的渲染序列" class="headerlink" title="Unity设置的渲染序列"></a>Unity设置的渲染序列</h3><p>类似之前<code>Tags { &quot;RenderType&quot;=&quot;Opaque&quot; }</code>,我们可以用Queue标签来决定我们的模型是怎么渲染的。</p><table><thead><tr><th style="text-align:center">队列名称</th><th style="text-align:center">队列索引</th><th style="text-align:center">索引描述</th></tr></thead><tbody><tr><td style="text-align:center">Background</td><td style="text-align:center">1000</td><td style="text-align:center">最早被渲染的队列，一般绘制背景元素</td></tr><tr><td style="text-align:center">Geometry</td><td style="text-align:center">2000</td><td style="text-align:center">默认渲染队列，不透明物体渲染队列</td></tr><tr><td style="text-align:center">AlphaTest</td><td style="text-align:center">2450</td><td style="text-align:center">需要透明度测试的物体在这个队列渲染</td></tr><tr><td style="text-align:center">Transparent</td><td style="text-align:center">3000</td><td style="text-align:center">使用透明度混合的物体在这个队列渲染</td></tr><tr><td style="text-align:center">Overlay</td><td style="text-align:center">4000</td><td style="text-align:center">最后被渲染的物体在这个队列，一般用于叠加效果</td></tr></tbody></table><h3 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h3><p>如果我们想要通过透明度混合来实现半透明效果，代码如下</p><pre class=" language-haxe"><code class="language-haxe"> SubShader    <span class="token punctuation">{</span>        Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>          Pass <span class="token punctuation">{</span>             ZWrite Off ······        <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p>ZWrite Off 意味者关闭深度写入，或者可以：</p><pre class=" language-haxe"><code class="language-haxe"> SubShader    <span class="token punctuation">{</span>        Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Transparent"</span> <span class="token punctuation">}</span>          ZWrite Off ······        Pass <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p>这样表示这个SubShader下的所有Pass都会关闭深度写入</p>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 入门（三）：编写第一个Shader</title>
      <link href="/2017/11/13/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAShader/"/>
      <url>/2017/11/13/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAShader/</url>
      
        <content type="html"><![CDATA[<h2 id="编写第一个Shader"><a href="#编写第一个Shader" class="headerlink" title="编写第一个Shader"></a>编写第一个Shader</h2><p>上一节我们学习了第一个简单的Shader，现在我们可以开始写第一个shader练练手了（搓搓手）。首先我们挑一个【边缘发光（水晶球）】的shader来写</p><p>首先来看一下效果图，如果你感兴趣的话就接下来看吧：<img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader3/shader.PNG?raw=true" alt></p><h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>根据物体表面法向量和视线向量的夹角来判断是否是物体的边缘部位。夹角越大（接近垂直）说明越接近物体边缘部分。<font color="#D37885">重点：向量点积运算。</font></p><h3 id="具体解说："><a href="#具体解说：" class="headerlink" title="具体解说："></a>具体解说：</h3><p>先放一段实现的代码：</p><pre class=" language-haxe"><code class="language-haxe">Shader "Custom<span class="token operator">/</span>Rim<span class="token comment" spellcheck="true">//RimBump" {</span>    Properties<span class="token punctuation">{</span>        <span class="token function">_Color</span><span class="token punctuation">(</span><span class="token string">"Main Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_SpecColor</span><span class="token punctuation">(</span><span class="token string">"Specular Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_BumpMap</span><span class="token punctuation">(</span><span class="token string">"Normalmap"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"bump"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">_RimColor</span><span class="token punctuation">(</span><span class="token string">"Rim Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.26</span><span class="token punctuation">,</span><span class="token number">0.19</span><span class="token punctuation">,</span><span class="token number">0.16</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span>        <span class="token function">_RimPower</span><span class="token punctuation">(</span><span class="token string">"Rim Power"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2.0</span>    <span class="token punctuation">}</span>        SubShader<span class="token punctuation">{</span>            Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span> <span class="token operator">=</span> <span class="token string">"Opaque"</span> <span class="token punctuation">}</span>            LOD <span class="token number">400</span>        CGPROGRAM        <span class="token preprocessor builtin">#pragma</span> surface surf BlinnPhong        <span class="token preprocessor builtin">#pragma</span> target <span class="token number">3.0</span>        sampler2D _BumpMap<span class="token punctuation">;</span>        fixed4 _Color<span class="token punctuation">;</span>        float4 _RimColor<span class="token punctuation">;</span>        float _RimPower<span class="token punctuation">;</span>        struct Input <span class="token punctuation">{</span>            float2 uv_MainTex<span class="token punctuation">;</span>            float2 uv_BumpMap<span class="token punctuation">;</span>            float3 viewDir<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        void <span class="token function">surf</span><span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutput o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> _Color<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Gloss <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Normal <span class="token operator">=</span> <span class="token function">UnpackNormal</span><span class="token punctuation">(</span><span class="token function">tex2D</span><span class="token punctuation">(</span>_BumpMap<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_BumpMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            half rim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>viewDir<span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Emission <span class="token operator">=</span> _RimColor<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>rim<span class="token punctuation">,</span> _RimPower<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ENDCG        <span class="token punctuation">}</span>            FallBack <span class="token string">"Diffuse"</span><span class="token punctuation">}</span></code></pre><p>如果你看过上一篇的Shader介绍你应该可以大致看懂上面的代码，我们就关键部分说明一下：</p><pre class=" language-haxe"><code class="language-haxe">void <span class="token function">surf</span><span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutput o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> _Color<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Gloss <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Normal <span class="token operator">=</span> <span class="token function">UnpackNormal</span><span class="token punctuation">(</span><span class="token function">tex2D</span><span class="token punctuation">(</span>_BumpMap<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_BumpMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            half rim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>viewDir<span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Emission <span class="token operator">=</span> _RimColor<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>rim<span class="token punctuation">,</span> _RimPower<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><ul><li>首先这两句：</li></ul><pre class=" language-haxe"><code class="language-haxe">o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> _Color<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>o<span class="token punctuation">.</span>Gloss <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>类比上一篇，o.Albedo 此时可以获得我们设置的颜色和贴图之间混合后的颜色，o.Gloss 我们将发光强度设置成1。</p><ul><li>接下来是重点：<pre class=" language-haxe"><code class="language-haxe">o<span class="token punctuation">.</span>Normal <span class="token operator">=</span> <span class="token function">UnpackNormal</span><span class="token punctuation">(</span><span class="token function">tex2D</span><span class="token punctuation">(</span>_BumpMap<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_BumpMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>half rim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>viewDir<span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>Emission <span class="token operator">=</span> _RimColor<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">pow</span> <span class="token punctuation">(</span>rim<span class="token punctuation">,</span> _RimStrength<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><code>UnpackNormal</code> 是定义在UnityCG.cginc文件中的方法（这个文件中包含了一系列常用的CG变量以及方法，在Unity安装路径中可以找到），<code>UnpackNormal</code>接受一个fixed4的输入，并将其转换为所对应的法线值（fixed3）。在解包得到这个值之后，将其赋给输出的Normal，接下来我们就可以来使用Normal值啦。<h4 id="有关法线贴图"><a href="#有关法线贴图" class="headerlink" title="有关法线贴图"></a>有关法线贴图</h4><blockquote><p>这一点归类于扩展阅读，如果你想知道<code>UnpackNormal</code>的原理可以继续查看，如果不的话就跳过这一段吧！<br>假设你想知道原理，那首先思考一个问题<strong>为什么法线贴图看起来大多是蓝色的？</strong> </p><ul><li>实际上，我们通常见到的这种偏蓝色的法线纹理中，存储的是在Tangent Space中的顶点法线方向。那么，问题又来了，什么是Tangent Space。在Tangent Space中，坐标原点就是顶点的位置，其中z轴是该顶点本身的法线方向（N）。这样，另外两个坐标轴就是和该点相切的两条切线。这样的切线是有无数条，但模型一般会给定该顶点的一个tangent。（<a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/" target="_blank" rel="noopener">给定的过程可以见这个链接</a>）</li><li>通常我们所见的法线纹理是基于<strong>原法线信息构建的坐标系</strong>来构建出来的。那种偏蓝色的法线纹理其实就是存储在每个顶点各自的Tangent Space中<strong>法线的扰动方向</strong>。也就是说，如果一个顶点的法线方向不变，那么在它的Tangent Space中，新的normal值就是z轴方向，也就是说值为(0, 0, 1)。但这并不是法线纹理中存储的最终值：因为一个向量每个维度的取值范围在(-1, 1)，在法线贴图中被压缩在颜色的范围[0,1]中，所以需要转换：<pre class=" language-haxe"><code class="language-haxe">颜色 <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> 法线 <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>线 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>颜色 <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre></li><li>这样，之前的法线值(0, 0, 1)实际上对应了法线纹理中RGB的值为(0.5, 0.5, 1)，而这个颜色也就是法线纹理中那大片的蓝色。这些蓝色实际上说明<strong>顶点的大部分法线是和模型本身法线一样</strong>的，不需要改变。总结一下就是，<code>法线纹理的RGB通道存储了在每个顶点各自的Tangent Space中的法线方向的映射值。</code></li><li>下一个问题：Unity编辑器中加入一张发现贴图，编辑器都会提示把法线纹理的“Texture Type”设置成“Normal Map”，这是为什么呢？是因为这样的设置可以让Unity根据不同平台对纹理进行压缩，当需要法线信息时，再通过UnpackNormal函数对法线纹理进行正确的采样，即<strong>将把颜色通道变成一个适合于实时法向映射的格式。</strong></li><li>再下一个问题：压缩的内容又是什么呢？其实法线贴图只有两个通道是真正必不可少的，因为第三个通道的值可以用另外两个推导出来（法线是单位向量）法线（x,y,z）是一条单位向量。所以知道了x,y,z里的任意两个，剩下的那个就可以通过计算得出。所以我们就可以使用2个通道的图储存x,y,z里的两个值，将xyz里剩余的值省略，通过计算得出。而压缩后的法线贴图，大小只有原来的1/4左右，故可以使用更大或者更多的贴图来提升画面品质。</li></ul></blockquote></li></ul><h3 id="重点讲解"><a href="#重点讲解" class="headerlink" title="重点讲解"></a>重点讲解</h3><p>回到刚刚打断的地方，下面两句：</p><pre class=" language-haxe"><code class="language-haxe">half rim <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">saturate</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span>IN<span class="token punctuation">.</span>viewDir<span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>Emission <span class="token operator">=</span> _RimColor<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">pow</span> <span class="token punctuation">(</span>rim<span class="token punctuation">,</span> _RimStrength<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>首先我们看<code>normalize</code>函数：为了对向量进行归一化处理（这里传入IN.viewDir指的是：WorldSpace View Direction，也就是当前坐标的视角方向）。 <code>dot</code>函数：返回传入的两个参数的点积，<code>saturate</code>函数：判断传入的参数是否在0-1之间，如果小于0，返回 0；如果大于 1，返回1； </li><li>接着第二句：<code>_RimColor.rgb * pow (rim, _RimStrength)</code>从_RimColor参数获取自发光颜色再和发光的强度混合，最终将颜色赋值给像素的Emission（发散颜色）</li><li>以上就是边缘发光效果的实现。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>下一次的shader我们将来写【半透明】的边缘发光效果。为此在下一篇我们将会梳理一下Unity shader透明效果的知识储配</p>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 入门（二）：查看第一个Shader</title>
      <link href="/2017/09/12/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9F%A5%E7%9C%8B%E7%AC%AC%E4%B8%80%E4%B8%AAShader/"/>
      <url>/2017/09/12/Unity%20Shader%20%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9F%A5%E7%9C%8B%E7%AC%AC%E4%B8%80%E4%B8%AAShader/</url>
      
        <content type="html"><![CDATA[<h2 id="查看第一个shader"><a href="#查看第一个shader" class="headerlink" title="查看第一个shader"></a>查看第一个shader</h2><p>上一节是理论知识的储备，如果你对细节部分感兴趣可以阅读更多的资料（Cg，HLSL，GLSL，OpenGl，DirectX的官方Doc等等），如果不求甚解的话，那我们就通过查看第一个shader来加深理解。我们在Unity中新建一个shader（Assets-&gt;Create-&gt;shader-&gt;standard surface shader）打开看发现里面已经有很多代码了。（版本Unity 2017.2.0f3）</p><pre class=" language-haxe"><code class="language-haxe">Shader <span class="token string">"Custom/NewSurfaceShader"</span> <span class="token punctuation">{</span>    Properties <span class="token punctuation">{</span>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span>    SubShader <span class="token punctuation">{</span>        Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token punctuation">}</span>        LOD <span class="token number">200</span>        CGPROGRAM        <span class="token comment" spellcheck="true">// Physically based Standard lighting model, and enable shadows on all light types</span>        <span class="token preprocessor builtin">#pragma</span> surface surf Standard fullforwardshadows        <span class="token comment" spellcheck="true">// Use shader model 3.0 target, to get nicer looking lighting</span>        <span class="token preprocessor builtin">#pragma</span> target <span class="token number">3.0</span>        sampler2D _MainTex<span class="token punctuation">;</span>        struct Input <span class="token punctuation">{</span>            float2 uv_MainTex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        half _Glossiness<span class="token punctuation">;</span>        half _Metallic<span class="token punctuation">;</span>        fixed4 _Color<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.</span>        <span class="token comment" spellcheck="true">// See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.</span>        <span class="token comment" spellcheck="true">// #pragma instancing_options assumeuniformscaling</span>        <span class="token function">UNITY_INSTANCING_CBUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// put more per-instance properties here</span>        UNITY_INSTANCING_CBUFFER_END        void <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Albedo comes from a texture tinted by color</span>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Metallic and smoothness come from slider variables</span>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ENDCG    <span class="token punctuation">}</span>    FallBack <span class="token string">"Diffuse"</span><span class="token punctuation">}</span></code></pre><p>emmm…….即使你有编程的基础也可能看的一头雾水，不过没关系，我们现在来一个个拆解这段代码。</p><p>首先我们来看shader的一个大体结构:  </p><p><img src="https://github.com/kurong00/blog/blob/master/thumbnail/shader2/Shader.png?raw=true" class="img-topic"></p><p>一个shader包含多个属性（Properties)，然后是一个或多个的子着色器（SubShader)，在实际运行中，哪一个子着色器被使用是由运行的平台所决定的。每一个子着色器中包含一个或者多个的Pass。在计算着色时，平台先选择最优先可以使用的着色器，然后依次运行其中的Pass，然后得到输出的结果。最后指定一个FallBack，用来处理所有Subshader都不能运行的情况,一般FallBack的都是平台已经定义好的shader。  </p><h2 id="逐行代码查看"><a href="#逐行代码查看" class="headerlink" title="逐行代码查看"></a>逐行代码查看</h2><p>我们打开刚刚新建的shader代码，开始逐行来看吧：</p><pre class=" language-haxe"><code class="language-haxe">Shader <span class="token string">"Custom/NewSurfaceShader"</span> <span class="token punctuation">{</span>    Properties <span class="token punctuation">{</span>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span></code></pre><h3 id="首先第一行"><a href="#首先第一行" class="headerlink" title="首先第一行"></a>首先第一行</h3><pre class=" language-haxe"><code class="language-haxe">Shader <span class="token string">"Custom/NewSurfaceShader"</span></code></pre><p>Custom是自定义的shader默认的文件夹，如果你自己想要归类shader文件夹，就可以定义二级标题比如”Custom/MyShader/NewSurfaceShader”，这样NewSurfaceShader就归类在MyShader下啦。</p><h3 id="接着一段代码块"><a href="#接着一段代码块" class="headerlink" title="接着一段代码块"></a>接着一段代码块</h3><pre class=" language-haxe"><code class="language-haxe">Properties <span class="token punctuation">{</span>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span></code></pre><p>这里是shader的属性部分：属性的格式写作如下 </p><pre><code>_Name(&quot;Display Name&quot;, type) = defaultValue[{options}]</code></pre><ul><li>_Name : 变量名，在之后的Shader代码中都用这个名字来获取该属性的内容</li><li>Display Name : 显示名，在Unity Inspector上显示的名字</li><li>type : 类型，可能的type所表示的内容有以下几种：  </li><li>defaultValue : 上面类型的默认值</li><li>options : 对于2D，或者Cube贴图有关，默认写一个空白的{}，例如下表</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">说明</th><th style="text-align:center">语法</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">浮点数</td><td style="text-align:center">_MyFloat(“Float”,Float)=3.5</td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center">整型数</td><td style="text-align:center">_MyInt(“Int”,Int)=1</td></tr><tr><td style="text-align:center">Range(min,max)</td><td style="text-align:center">一个介于最小值和最大值之间的浮点数</td><td style="text-align:center">_MyRange(“Range”,Range(0.0,1.0))=0.5</td></tr><tr><td style="text-align:center">Color</td><td style="text-align:center">RGBA（红绿蓝和透明度）四个量来定义的颜色</td><td style="text-align:center">_MyColor(“Color”,Color)=(1,1,1,1)</td></tr><tr><td style="text-align:center">2D</td><td style="text-align:center">贴图信息</td><td style="text-align:center">_My2D(“2D”,2D)=”white”{}</td></tr><tr><td style="text-align:center">Cube</td><td style="text-align:center">立方纹理，由6张关联的2D贴图合在一起</td><td style="text-align:center">_MyCube(“Cube”,Cube)=”bump”{}</td></tr><tr><td style="text-align:center">Vector</td><td style="text-align:center">四维数</td><td style="text-align:center">_MyVector(“Vector”,Vector)=(1,2,3,1)</td></tr></tbody></table><h3 id="SubShader内部构造"><a href="#SubShader内部构造" class="headerlink" title="SubShader内部构造"></a>SubShader内部构造</h3><h4 id="Tags：键值对"><a href="#Tags：键值对" class="headerlink" title="Tags：键值对"></a>Tags：键值对</h4><pre class=" language-haxe"><code class="language-haxe">Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token punctuation">}</span></code></pre><p>tags用来告诉渲染器：何时以及怎样渲染这个对象。</p><table><thead><tr><th style="text-align:center">标签名称</th><th style="text-align:center">标签说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">Queue</td><td style="text-align:center">控制渲染顺序，保证不透明物体在透明物体之前渲染</td><td style="text-align:center">Tags {“Queue”=”Transparent”}</td></tr><tr><td style="text-align:center">RenderType</td><td style="text-align:center">对着色器分类，例如这是渲染透明的，这是渲染不透明的</td><td style="text-align:center">Tags {“RenderType”=”Opaque”}</td></tr><tr><td style="text-align:center">DisableBatching</td><td style="text-align:center">是否对该SubShader进行批处理</td><td style="text-align:center">Tags {“DisableBatching”=”True”}</td></tr><tr><td style="text-align:center">ForceNoShadowCasting</td><td style="text-align:center">该SubShader是否会投射阴影</td><td style="text-align:center">Tags {“ForceNoShadowCasting”=”True”}</td></tr><tr><td style="text-align:center">IgnoreProjector</td><td style="text-align:center">该SubShader是否会Project影响，常用于半透明物体</td><td style="text-align:center">Tags {“IgnoreProjector”=”True”}</td></tr><tr><td style="text-align:center">CanUseSpriteAtlas</td><td style="text-align:center">该SubShader用于Sprites时，要设置成false</td><td style="text-align:center">Tags {“CanUseSpriteAtlas”=”False”}</td></tr><tr><td style="text-align:center">PreviewType</td><td style="text-align:center">Inspector preview上默认是圆形预设，可以改为plane或者skybox</td><td style="text-align:center">Tags {“PreviewType”=”Plane”}</td></tr></tbody></table><h4 id="LOD：Level-of-Detail"><a href="#LOD：Level-of-Detail" class="headerlink" title="LOD：Level of Detail"></a>LOD：Level of Detail</h4><pre class=" language-haxe"><code class="language-haxe">LOD <span class="token number">200</span></code></pre><p>这个数值决定了我们能用什么样的Shader。当设定的LOD小于SubShader所指定的LOD时，这个SubShader就不可以用了。Unity自定义了一组LOD的数值，我们在实现自己的Shader的时候可以参考来设定自己的LOD数值，以便控制渲染。</p><table><thead><tr><th style="text-align:center">LOD名称</th><th style="text-align:center">数值</th></tr></thead><tbody><tr><td style="text-align:center">VertexLit及其系列</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">Decal, Reflective VertexLit</td><td style="text-align:center">150</td></tr><tr><td style="text-align:center">Diffuse</td><td style="text-align:center">200</td></tr><tr><td style="text-align:center">Diffuse Detail, Reflective Bumped Unlit, Reflective Bumped VertexLit</td><td style="text-align:center">250</td></tr><tr><td style="text-align:center">Bumped, Specular</td><td style="text-align:center">300</td></tr><tr><td style="text-align:center">Parallax</td><td style="text-align:center">500</td></tr><tr><td style="text-align:center">Parallax Specular</td><td style="text-align:center">600</td></tr></tbody></table><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-haxe"><code class="language-haxe">CGPROGRAM        <span class="token comment" spellcheck="true">// Physically based Standard lighting model, and enable shadows on all light types</span>        <span class="token preprocessor builtin">#pragma</span> surface surf Standard fullforwardshadows        <span class="token comment" spellcheck="true">// Use shader model 3.0 target, to get nicer looking lighting</span>        <span class="token preprocessor builtin">#pragma</span> target <span class="token number">3.0</span>        sampler2D _MainTex<span class="token punctuation">;</span>        struct Input <span class="token punctuation">{</span>            float2 uv_MainTex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        half _Glossiness<span class="token punctuation">;</span>        half _Metallic<span class="token punctuation">;</span>        fixed4 _Color<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.</span>        <span class="token comment" spellcheck="true">// See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.</span>        <span class="token comment" spellcheck="true">// #pragma instancing_options assumeuniformscaling</span>        <span class="token function">UNITY_INSTANCING_CBUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// put more per-instance properties here</span>        UNITY_INSTANCING_CBUFFER_END        void <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Albedo comes from a texture tinted by color</span>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Metallic and smoothness come from slider variables</span>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ENDCG</code></pre><p>终于到了最重要的部分，首先<code>CGPROGRAM</code>和<code>ENDCG</code>成对出现,表示中间包裹的是一段Cg程序，接着是一个编译指令：<code>#pragma surface surf Standard fullforwardshadows</code><br>意味着我们要写一个表面Shader，并指定了光照模型，具体语法是</p><pre class=" language-haxe"><code class="language-haxe"><span class="token preprocessor builtin">#pragma</span> surface surfaceFunction lightModel <span class="token punctuation">[</span>optionalparams<span class="token punctuation">]</span></code></pre><ul><li>surface ： 声明的是一个表面着色器</li><li>surfaceFunction ： 着色器代码的方法的名字</li><li>lightModel ： 使用的光照模型。</li></ul><p>对应上面的编译指令：我们声明了一个表面着色器，实际的代码在 surf 函数中（在下面的代码能找到该函数），使用 Standard 作为光照模型。</p><p>接下来是  <code>sampler2D _MainTex;</code> 我们知道在CG中，Texture（贴图）简单来说就是一块内存存储的，使用了RGBA通道，且每个通道8bits，的数据。而具体地想知道像素与坐标的对应关系，以及获取这些数据，一次一次去计算内存地址或者偏移显然不可行，因此可以通过sampler2D来对贴图进行操作。一言以蔽之就是，sampler2D是GLSL中的2D贴图的类型，相应的，还有sampler1D，sampler3D，samplerCube等等格式。</p><p>然后的重点是：为什么在这里需要一句对_MainTex的声明？首先之前我们已经在Properties里声明过它是贴图了（<code>_MainTex (&quot;Albedo (RGB)&quot;, 2D) = &quot;white&quot; {}</code>）。我们用来实例的这个shader其实是由两个相对独立的块组成的，外层的属性声明，回滚等等是Unity可以直接使用和编译的ShaderLab；而现在我们是在CGPROGRAM…ENDCG这样一个代码块中，这是一段CG程序。对于这段CG程序，要想访问在Properties中所定义的变量的话，必须使用<strong>和之前变量相同的名字进行声明</strong>。因此<code>sampler2D _MainTex;</code>做的事情就是再次声明并链接了_MainTex，使得接下来的CG程序能够使用这个变量。后面的<code>half _Glossiness;</code> <code>half _Metallic;</code>  <code>fixed4 _Color;</code>都是同样的道理。回到原来的地方，下一句是:</p><pre class=" language-haxe"><code class="language-haxe">struct Input <span class="token punctuation">{</span>    float2 uv_MainTex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>如果你有编程的经历，那么结构体应该很熟悉了，这一段我们结合下面的surf一起来说</p><pre class=" language-haxe"><code class="language-haxe">void <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Albedo comes from a texture tinted by color</span>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Metallic and smoothness come from slider variables</span>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>刚才提到的<code>#pragma surface surf Standard fullforwardshadows</code>里面surf 函数就是对应的上面一段。我们看函数头输入的参数有Input IN。这个Input就对应上面的结构体。我们可以把所需要参与计算的数据都放到这个Input结构中，再传入surf函数使用；SurfaceOutputStandard是已经定义好了里面类型输出结构。作为输入的结构体<strong>必须命名为Input</strong>，这个结构体中定义了一个float2的变量，emmmm···你可能会感到奇怪float后面跟着数字，这是什么意思呢？其实float和vec都可以在之后加入一个2到4的数字，来表示被打包在一起的2到4个同类型数。比如：<code>float4 color;</code> <code>float3 multipliedColor = color.rgb * coordinate.x;</code>之类的。</p><p>在这个例子里，我们声明了一个叫做<code>uv_MainTex</code>的包含两个浮点数的变量。UV mapping的作用是将一个2D贴图上的点按照一定规则映射到3D模型上，在CG程序中，我们有这样的约定，在一个贴图变量之前加上uv两个字母，就代表提取它的uv值。我们之后就可以在surf程序中直接通过访问uv_MainTex来取得这张贴图当前需要计算的点的坐标值。接下来我们详细看surf内部的操作：</p><pre class=" language-haxe"><code class="language-haxe">fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span></code></pre><p>这里用到了一个tex2d函数，这是CG程序中用来在一张贴图中对一个点进行采样的方法，返回一个float4。这个例子中用刚刚得到的float4*_Color使得这个贴图经过和颜色混合。</p><pre class=" language-haxe"><code class="language-haxe">o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span></code></pre><p>将其颜色的rbg值赋予了输出的像素颜色</p><pre class=" language-haxe"><code class="language-haxe">o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span>o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span></code></pre><p>都是用到上头Properties中我们定义的变量来赋值材质中的Metallic and smoothness</p><pre class=" language-haxe"><code class="language-haxe">o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span></code></pre><p>将a值赋予透明度。至此surf介绍完毕，这个例子中shader最重要的部分就是以上这些啦！</p><h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><pre class=" language-haxe"><code class="language-haxe">FallBack <span class="token string">"Diffuse"</span></code></pre><p>当所有上面的SubShader都不可以在目标平台上运行时，Unity就会调用这个shader，当然你也可以关闭这个选项，那就意味着如果没有显卡可以跑上面的shader，那我们就不管它啦!</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这是最简单最简单的shader，看到这里的你应该可以了解一些简单的shader了，可以去Unity的Surface Shader Exampless上查看一些基础shader的编写内容，下一篇我们会开始第一个shader的编写。</p>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
